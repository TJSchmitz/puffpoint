rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && (request.auth.token.admin == true);
    }

    function isMod() {
      return isSignedIn() && (request.auth.token.mod == true);
    }

    function isOwner(resourceData) {
      return isSignedIn() && resourceData.createdBy == request.auth.uid;
    }

    match /spots/{spotId} {
      allow read: if isSignedIn() && resource.data.status == 'active';
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data) || isMod() || isAdmin();
    }

    match /spotPhotos/{photoId} {
      allow read: if isSignedIn() && resource.data.moderation.status == 'approved';
      allow create: if isSignedIn();
      allow update, delete: if isOwner(resource.data) || isMod() || isAdmin();
    }

    match /reviews/{reviewId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if request.auth.uid == resource.data.userId || isMod() || isAdmin();
    }

    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, update: if isMod() || isAdmin();
    }

    match /users/{uid} {
      allow read: if isSignedIn() && uid == request.auth.uid;
      allow create: if isSignedIn() && uid == request.auth.uid;
      allow update: if isSignedIn() && uid == request.auth.uid;
    }

    // Lists
    function isListReader(list) {
      return isSignedIn() && (list.ownerId == request.auth.uid || (list.members[request.auth.uid] in ['view', 'edit']));
    }

    function isListEditor(list) {
      return isSignedIn() && (list.ownerId == request.auth.uid || (list.members[request.auth.uid] == 'edit'));
    }

    match /lists/{listId} {
      allow read: if isListReader(resource.data);
      allow create: if isSignedIn()
                   && request.resource.data.ownerId == request.auth.uid
                   && request.resource.data.visibility == 'private'
                   && request.resource.data.keys().hasOnly(['name','ownerId','visibility','members','createdAt','updatedAt'])
                   && request.resource.data.members == {};
      allow update: if isListEditor(resource.data)
                   && request.resource.data.keys().hasOnly(['name','members','updatedAt']);
      allow delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;

      match /items/{itemId} {
        allow read: if isListReader(get(/databases/$(database)/documents/lists/$(listId)).data);
        allow create: if isListEditor(get(/databases/$(database)/documents/lists/$(listId)).data)
                      && request.resource.data.keys().hasOnly(['spotId','addedBy','note','createdAt'])
                      && request.resource.data.addedBy == request.auth.uid;
        allow delete: if isListEditor(get(/databases/$(database)/documents/lists/$(listId)).data);
      }
    }

    match /listInvites/{inviteId} {
      allow read: if isListEditor(get(/databases/$(database)/documents/lists/$(resource.data.listId)).data);
      allow create: if false; // only via callable
      allow update, delete: if false; // only via callable
    }
  }
}